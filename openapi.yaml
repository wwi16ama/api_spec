openapi: 3.0.0
info:
  version: 0.4.5
  title: WWI16AMA - Spec
  license:
    name: APL 2
servers:
  - url: 'http://wwi16ama.feste-ip.net/backend_api/'
    description: Production server (uses live data)
  - url: 'http://wwi16ama.feste-ip.net/backend_api_test/'
    description: Test server (uses test data for integration)
security:
  - basicAuth: []
paths:
  /loginCheck:
    get:
      summary: '[] Checks if given userID and password are correct'
      tags: 
      - Login / Logout
      responses:
        '204':
          description: When userID and password are correct
        '401':
          description: When userID and password are not correct
  /logout:
    get:
      summary: Log's User out and invalidates session
      security:
        - basicAuth: []
      tags:
        - Login / Logout
      responses:
        '204':
          description: With redirect to /login?logout
  /members:
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/paths/~1members'
  '/members/{id}':
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/paths/~1members~1%7Bid%7D'
  '/members/{id}/changePasswordAsMember':
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/paths/~1members~1%7Bid%7D~1changePasswordAsMember'
  '/members/{id}/changePasswordAsAdmin':
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/paths/~1members~1%7Bid%7D~1changePasswordAsAdmin'
  '/services/{memberId}':
    get:
      summary: '[VV, SYSADMIN, SELF]'
      tags:
        - Geleistete Dienste
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/YearlyService'
                    - $ref: '#/components/schemas/DailyService'
        '404':
          description: Response when no member found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/services/yearly/{memberId}':
    post:
      summary: '[VV, SYSADMIN] create new yearly Service'
      tags:
        - Geleistete Dienste
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YearlyService'
      responses:
        '204':
          description: Expected response to a valid request
        '404':
          description: Response when no PioltLog of specific Member is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/services/daily/{memberId}':
    post:
      summary: '[VV, SYSADMIN] Create Daily Service'
      tags:
        - Geleistete Dienste
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DailyService'
      responses:
        '204':
          description: Expected response to a valid request
        '404':
          description: Response when no PioltLog of specific Member is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /planes:
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/paths/~1planes'
  '/planes/{id}':
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/paths/~1planes~1%7Bid%7D'
  /fees:
    get:
      summary: '[] List of fees'
      tags:
        - Fees / Credits
      responses:
        '200':
          description: An array of fees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fee'
  /credits:  
    get:
      summary: '[] List of credits (Gutschriftenliste)'
      tags:
        - Fees / Credits
      responses:
        '200':
          description: An array of credits 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credit'
  /accounts:
    get:
      summary: '[KASSIERER] Paginated list of accounts without transactions.'
      tags:
        - Accounts
      responses:
        '200':
          description: A paged array of Accounts
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ListAccount'
        '400':
          description: This error is thrown when the parameters are faulty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/vereinskonto:
    get:
      summary: '[VV, SYSADMIN, KASSIERER] Zeigt das Vereinskonto.'
      tags:
        - Accounts
      responses:
        '200':
          description: Das Vereinskonto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccount'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/accounts/{id}':
    get:
      summary: '[KASSIERER, SELF] Info for a specific account with his transactions'
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the member to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Response when no account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/accounts/{id}/transactions':
    post:
      summary: '[KASSIERER, SELF] Add a single transaction to an account'
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the related account
          schema:
            type: integer
            format: int32
      requestBody:
        description: Transaction to add to the account
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTransaction'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Response when request is wrong, i.e. if required fields are empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Response when no account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pilotLog/{memberId}':
    get:
      summary: '[SELF] Pilot log entry of a specific Member''s Pilotlog'
      tags:
        - Pilot-Log
      parameters:
        - name: memberId
          in: path
          required: true
          description: The id of the member to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PilotLogEntry'
        '404':
          description: Response when no PioltLog of specific Member is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pilotLog/{memberId}/pilotlogentry':              
    post:
      summary: '[SELF] New Pilotlogentry of a specific Member''s Pilotlog'
      tags:
        - Pilot-Log
      parameters:
        - name: memberId
          in: path
          required: true
          description: The id of the member to retrieve
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPilotLogEntry'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPilotLogEntry'
        '404':
          description: Response when no PioltLog of specific Member is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    PilotLogEntry:
      allOf:
        - properties:
            flightId: 
              type: integer
              format: int32
        - $ref: '#/components/schemas/NewPilotLogEntry'
    NewPilotLogEntry:
      properties:
        planeNumber:
          type: string
        departureLocation: 
          type: string
        departureTime:
          type: string
          format: date-time
        arrivalLocation:
          type: string
        arrivalTime:
          type: string
          format: date-time
        flightWithGuests:
          type: boolean
    Member:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/Member'
    PostMember:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/PostMember'
    PutMember:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/PutMember'
    ListMember:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/ListMember'
    Address:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/Address'
    AbstractService:
      properties:
        id:
          type: integer
          format: int32
        name:
          $ref: '#/components/schemas/ServiceName'
        gutschrift:
          type: number
          format: double
    YearlyService:
      description: ""
      allOf:
        - $ref: '#/components/schemas/AbstractService'
        - properties:
            year:
              type: string
              format: year
    DailyService:
      description: "" 
      allOf:
        - $ref: '#/components/schemas/AbstractService'
        - properties:
            from:
              type: string
              format: date
            to:
              type: string
              format: date
    Error:
      required:
        - url
        - message
      properties:
        url:
          type: string
        message:
          type: string
    NewPlane:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/components/schemas/NewPlane'      
    Plane:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/components/schemas/Plane'
    Fee:
      required:
        - category
        - fee
      properties:
        category:
          type: string
          enum: [ACTIVE, U20ACTIVE, PASSIVE, HONORARYMEMBER]
        fee:
          type: integer
          format: int32
    Credit:
      required:
        - serviceName
        - amount
        - period
      properties:
        id:
          type: integer
          format: int32
        serviceName:
          $ref: '#/components/schemas/ServiceName'
        amount:
          type: number
          format: double
        period:
          type: string
          enum: [YEAR, DAY]
    ListAccount:
      properties:
        id:
          type: integer
          format: int32
        balance:
          type: number
          format: double
    Account:
        allOf:
        - properties:
            transactions:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
        - $ref: '#/components/schemas/ListAccount'
    NewTransaction:
      required:
        - amount
        - type
      properties:
        amount:
          type: number
          format: double
        type:
          type: string
          enum: ["MITGLIEDSBEITRAG", "GEBÜHRFLUGZEUG", "GUTSCHRIFTAMT", "GUTSCHRIFTLEISTUNG","EINZAHLUNG", "AUSZAHLUNG"]
    Transaction:
      allOf:
        - properties:
            id:
              type: integer
              format: int64
            timestamp:
              type: string
              format: date-time
        - $ref: '#/components/schemas/NewTransaction'
    ServiceName:
      type: string
      enum: [J_VORSTANDSMITGLIED, J_FLUGLEHRER, J_FLUGWART, T_TAGESEINSATZ, T_PILOT]
      
